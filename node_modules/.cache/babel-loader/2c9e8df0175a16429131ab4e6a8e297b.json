{"ast":null,"code":"var _jsxFileName = \"/Users/bsharna/Piscine/Matcha/React/app_new/src/App.js\";\nimport React from 'react';\nimport Info from \"./Components/info\";\nimport Form from \"./Components/form\";\nimport Weather from \"./Components/weather\";\nconst API_KEY = \"4b8c4084a4a690e55a8fbc77fb37ce5d\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      error: undefined\n    };\n\n    this.gettingWeather = async event => {\n      event.preventDefault(); //Перезагрузка страницы будет уничтожена.\n\n      const city = event.target.elements.city.value; //Fetch - позволяет прочитать URL-адрес и Получить из него данные\n\n      const api_url = await fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \"&appid=\").concat(API_KEY, \"&units=metric\"));\n      const data = await api_url.json();\n      console.log(data);\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset,\n        error: \"\"\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Info, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(Form, {\n      weatherMethod: this.gettingWeather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      temperature: this.state.temperature,\n      city: this.state.city,\n      country: this.state.country,\n      sunrise: this.state.sunrise,\n      sunset: this.state.sunset,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bsharna/Piscine/Matcha/React/app_new/src/App.js"],"names":["React","Info","Form","Weather","API_KEY","App","Component","state","temperature","undefined","city","country","sunrise","sunset","error","gettingWeather","event","preventDefault","target","elements","value","api_url","fetch","data","json","console","log","setState","main","temp","name","sys","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AAEA,MAAMC,OAAO,GAAG,kCAAhB;;AAEA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAE9BC,KAF8B,GAEtB;AACJC,MAAAA,WAAW,EAAEC,SADT;AAEJC,MAAAA,IAAI,EAAED,SAFF;AAGJE,MAAAA,OAAO,EAAEF,SAHL;AAIJG,MAAAA,OAAO,EAAEH,SAJL;AAKJI,MAAAA,MAAM,EAAEJ,SALJ;AAMJK,MAAAA,KAAK,EAAEL;AANH,KAFsB;;AAAA,SAW9BM,cAX8B,GAWb,MAAOC,KAAP,IAAiB;AAC9BA,MAAAA,KAAK,CAACC,cAAN,GAD8B,CACN;;AACxB,YAAMP,IAAI,GAAGM,KAAK,CAACE,MAAN,CAAaC,QAAb,CAAsBT,IAAtB,CAA2BU,KAAxC,CAF8B,CAI9B;;AACA,YAAMC,OAAO,GAAG,MAAMC,KAAK,6DAAsDZ,IAAtD,oBAAoEN,OAApE,mBAA3B;AACA,YAAMmB,IAAI,GAAG,MAAMF,OAAO,CAACG,IAAR,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEA,WAAKI,QAAL,CAAc;AACVnB,QAAAA,WAAW,EAAEe,IAAI,CAACK,IAAL,CAAUC,IADb;AAEVnB,QAAAA,IAAI,EAAEa,IAAI,CAACO,IAFD;AAGVnB,QAAAA,OAAO,EAAEY,IAAI,CAACQ,GAAL,CAASpB,OAHR;AAIVC,QAAAA,OAAO,EAAEW,IAAI,CAACQ,GAAL,CAASnB,OAJR;AAKVC,QAAAA,MAAM,EAAEU,IAAI,CAACQ,GAAL,CAASlB,MALP;AAMVC,QAAAA,KAAK,EAAE;AANG,OAAd;AAQH,KA5B6B;AAAA;;AA8B9BkB,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,IAAD;AAAM,MAAA,aAAa,EAAE,KAAKjB,cAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,OAAD;AACI,MAAA,WAAW,EAAE,KAAKR,KAAL,CAAWC,WAD5B;AAEI,MAAA,IAAI,EAAE,KAAKD,KAAL,CAAWG,IAFrB;AAGI,MAAA,OAAO,EAAE,KAAKH,KAAL,CAAWI,OAHxB;AAII,MAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWK,OAJxB;AAKI,MAAA,MAAM,EAAE,KAAKL,KAAL,CAAWM,MALvB;AAMI,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWO,KANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CADJ;AAeH;;AA9C6B;;AAiDlC,eAAeT,GAAf","sourcesContent":["import React from 'react';\nimport Info from \"./Components/info\";\nimport Form from \"./Components/form\";\nimport Weather from \"./Components/weather\";\n\nconst API_KEY = \"4b8c4084a4a690e55a8fbc77fb37ce5d\";\n\nclass App extends React.Component {\n\n    state = {\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        sunrise: undefined,\n        sunset: undefined,\n        error: undefined\n    }\n\n    gettingWeather = async (event) => {\n        event.preventDefault(); //Перезагрузка страницы будет уничтожена.\n        const city = event.target.elements.city.value;\n\n        //Fetch - позволяет прочитать URL-адрес и Получить из него данные\n        const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n        const data = await api_url.json();\n        console.log(data);\n\n        this.setState({\n            temperature: data.main.temp,\n            city: data.name,\n            country: data.sys.country,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            error: \"\"\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Info />\n                <Form weatherMethod={this.gettingWeather} />\n                <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    sunrise={this.state.sunrise}\n                    sunset={this.state.sunset}\n                    error={this.state.error}\n                />\n            </div>\n\n        );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}