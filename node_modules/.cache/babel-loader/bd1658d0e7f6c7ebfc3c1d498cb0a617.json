{"ast":null,"code":"var _jsxFileName = \"/Users/bsharna/Piscine/Matcha/React/app_new/src/App.js\";\nimport React from 'react';\nimport Info from \"./Components/info\";\nimport Form from \"./Components/form\";\nimport Weather from \"./Components/weather\";\nconst API_KEY = \"4b8c4084a4a690e55a8fbc77fb37ce5d\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temperature: undefined,\n      temperature_max: undefined,\n      temperature_min: undefined,\n      humidity: undefined,\n      city: undefined,\n      country: undefined,\n      pressure: undefined,\n      sunset: undefined,\n      error: undefined\n    };\n\n    this.gettingWeather = async event => {\n      event.preventDefault(); //Перезагрузка страницы будет уничтожена.\n\n      let city = event.target.elements.city.value;\n\n      if (city) {\n        //Fetch - позволяет прочитать URL-адрес и Получить из него данные\n        const api_url = await fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \"&appid=\").concat(API_KEY, \"&units=metric\"));\n        const data = await api_url.json();\n        var sunset = data.sys.sunset;\n        var date = new Date();\n        date.setTime(sunset);\n        var sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n        this.setState({\n          temperature: data.main.temp,\n          temperature_max: data.main.temp_max,\n          temperature_min: data.main.temp_min,\n          humidity: data.main.humidity,\n          city: data.name,\n          country: data.sys.country,\n          pressure: data.main.pressure,\n          sunset: sunset_date,\n          error: undefined\n        });\n        console.log(data);\n      } else {\n        this.setState({\n          temperature: undefined,\n          temperature_max: undefined,\n          temperature_min: undefined,\n          humidity: undefined,\n          city: undefined,\n          country: undefined,\n          pressure: undefined,\n          sunset: undefined,\n          error: \"Введите название города\"\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-5 info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Info, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-sm-7 form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Form, {\n      weatherMethod: this.gettingWeather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      temperature: this.state.temperature,\n      temperature_max: this.state.temperature_max,\n      temperature_min: this.state.temperature_min,\n      humidity: this.state.humidity,\n      city: this.state.city,\n      country: this.state.country,\n      pressure: this.state.pressure,\n      sunset: this.state.sunset,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bsharna/Piscine/Matcha/React/app_new/src/App.js"],"names":["React","Info","Form","Weather","API_KEY","App","Component","state","temperature","undefined","temperature_max","temperature_min","humidity","city","country","pressure","sunset","error","gettingWeather","event","preventDefault","target","elements","value","api_url","fetch","data","json","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","setState","main","temp","temp_max","temp_min","name","console","log","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Info from \"./Components/info\";\nimport Form from \"./Components/form\";\nimport Weather from \"./Components/weather\";\n\nconst API_KEY = \"4b8c4084a4a690e55a8fbc77fb37ce5d\";\n\nclass App extends React.Component {\n\n    state = {\n        temperature: undefined,\n        temperature_max: undefined,\n        temperature_min: undefined,\n        humidity: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        sunset: undefined,\n        error: undefined\n    }\n\n    gettingWeather = async (event) => {\n        event.preventDefault(); //Перезагрузка страницы будет уничтожена.\n        let city = event.target.elements.city.value;\n\n        if (city) {\n            //Fetch - позволяет прочитать URL-адрес и Получить из него данные\n            const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n            const data = await api_url.json();\n\n            var sunset = data.sys.sunset;\n            var date = new Date();\n            date.setTime(sunset);\n            var sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n            this.setState({\n                temperature: data.main.temp,\n                temperature_max: data.main.temp_max,\n                temperature_min: data.main.temp_min,\n                humidity: data.main.humidity,\n                city: data.name,\n                country: data.sys.country,\n                pressure: data.main.pressure,\n                sunset: sunset_date,\n                error: undefined\n            });\n            console.log(data);\n        } else {\n            this.setState({\n                temperature: undefined,\n                temperature_max: undefined,\n                temperature_min: undefined,\n                humidity: undefined,\n                city: undefined,\n                country: undefined,\n                pressure: undefined,\n                sunset: undefined,\n                error: \"Введите название города\"\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <div className=\"main\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-sm-5 info\">\n                                <Info/>\n                            </div>\n                            <div className=\"col-sm-7 form\">\n                                <Form weatherMethod={this.gettingWeather}/>\n                                <Weather\n                                    temperature={this.state.temperature}\n                                    temperature_max={this.state.temperature_max}\n                                    temperature_min={this.state.temperature_min}\n                                    humidity={this.state.humidity}\n                                    city={this.state.city}\n                                    country={this.state.country}\n                                    pressure={this.state.pressure}\n                                    sunset={this.state.sunset}\n                                    error={this.state.error}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}